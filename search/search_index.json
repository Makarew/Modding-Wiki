{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":"<p>Welcome to Makarew's Modding Wiki!</p> <p>Here you'll be able to find information about creating mods for various games with my tools. You'll also find information on my reverse engineering efforts.</p> <p>You can see tools I've made here.</p> <p>You can see what I've reverse engineered here.</p>"},{"location":"re/","title":"Reverse Engineering","text":""},{"location":"re/#idol-showdown","title":"Idol Showdown","text":"<p>Character Palettes</p>"},{"location":"re/#samba-de-amigo-2023","title":"Samba de Amigo 2023","text":"<p>Note</p> <p><code>Samba de Amigo: Virtual Party</code> and <code>Samba de Amigo: Party-to-Go</code> are ports of <code>Samba de Amigo: Party Central</code>. As a result, all formats are the same between all three games.</p> <p>Charts</p> <p>Song List</p>"},{"location":"re/#sonic-shuffle","title":"Sonic Shuffle","text":"<p>Models</p> <p>Board Layout</p> <p>Audio</p>"},{"location":"tools/","title":"Tools","text":""},{"location":"tools/#general-tools","title":"General Tools","text":"<p>ProReader (Unreleased) - Allow PC games read Nintendo amiibo using a Nintendo Switch Pro Controller</p> <p>AMOD Installer (Unreleased) - A mod installer</p> <p>RMMBY (No Longer Supported) - An ingame Unity mod manager</p>"},{"location":"tools/#idol-showdown","title":"Idol Showdown","text":"<p>Idol Showdown Studio - Create custom character palettes and stages</p>"},{"location":"tools/#samba-de-amigo-2023","title":"Samba de Amigo 2023","text":"<p>Note</p> <p><code>Samba de Amigo: Virtual Party</code> and <code>Samba de Amigo: Party-to-Go</code> are ports of <code>Samba de Amigo: Party Central</code>. As a result, all tools, outside of installers, are compatible with all three games.</p> <p>Amigo de Mapeo (Unreleased) - Create custom charts</p>"},{"location":"tools/#sonic-the-hedgehog-project-06","title":"Sonic the Hedgehog: Project '06","text":"<p>Stage Extensions - Additional tools for the stage creator</p>"},{"location":"container/","title":"Container editing","text":""},{"location":"samba-de-amigo/","title":"Samba de Amigo 2023","text":"<p>Here you can find tools I've created for Samba de Amigo 2023, and what I've learned about how the games work.</p> <p>Warning</p> <p>I'm still looking into Samba de Amigo. Nothing public has been released. Nothing here should be considered 100% accurate or final.</p> <ul> <li> Charting \u2013 Creating charts with Amigo de Mapeo.</li> <li> [Chart Format] \u2013 Information about how charts are formatted.</li> <li> [Song List] \u2013 Information about how songs are loaded.</li> <li> [AMOD] \u2013 Information about getting mods running in game.</li> </ul>"},{"location":"samba-de-amigo/chart/","title":"Amigo de Mapeo","text":"<p>Amigo de Mapeo makes the charting process easier by providing a simple GUI for editing.</p>"},{"location":"samba-de-amigo/chart/#getting-to-know-the-ui","title":"Getting To Know The UI","text":"<p>The main UI of Amigo de Mapeo is divided into three sections: Song Info, Playback, and Editing</p>"},{"location":"samba-de-amigo/chart/#song-info","title":"Song Info","text":"<p>The Song Info section of the UI is found along in the lower right corner. This section will get everything else ready for charting.</p> <p>Here's what everything in Song Info does:</p> <ul> <li>BPM - The beats per minute of the song. Make sure this is accurate to ensure notes line up.</li> <li>Resolution - The amount of subdivisions per measure. A high value is recommended.</li> <li>New - Start a new project.</li> <li>Load - Load a saved project.</li> <li>Save - Save the current project.</li> <li>Difficulties - Select the difficulty to edit. Toggle the checkbox to enable/disable the difficulty.</li> <li>Title - The title of the song.</li> </ul>"},{"location":"samba-de-amigo/chart/#playback","title":"Playback","text":"<p>The Playback section of the UI wraps around the screen from the left side, along the top, and to the right side, above the Song Info Section. This section lets you view where you are in the song, along with fast and precise control to move where you are in the song.</p> <p>Here's what everything in Playback does:</p> <ul> <li>Spectrum - On the left side, the spectrum shows you how strong frequencies are. Low frequencies are at the top, and high frequencies are at the bottom.</li> <li>Waveform - On the top, shows a complete waveform of the song. The red line shows where you are in the song. Click and drag the red line to quickly scrub through the song.</li> <li>Duration - On the right, below the waveform. Shows the total duration of the song, along with the current time of where you are in the song.</li> <li>Play/Pause - Below duration, allows you to play and pause playback.</li> <li>Measure - Below Play/Pause. Functions the same as duration, but displays in measure and resolution. The measure is on the left of the <code>.</code>, and the resolution is on the right.</li> <li>Measure Adjust - Below measure, allows you to scrub through the song by measures.</li> <li>Resolution Adjust - Below measure adjust. Similar to measure adjust, but using resolution.</li> </ul>"},{"location":"samba-de-amigo/chart/#editing","title":"Editing","text":"<p>The Editing section of the UI in the center allows you to actually create your chart. The Editing section has two modes: Placement and Modifying.</p>"},{"location":"samba-de-amigo/chart/#placement","title":"Placement","text":"<p>When one of the notes in the bottom left of the section is highlighted after clicking it, you'll enter Placement mode. You can now click in one of the six note circles to place the selected note type at that position at the current measure and resolution. To exit Placement mode, click any empty space.</p>"},{"location":"samba-de-amigo/chart/#modifying","title":"Modifying","text":"<p>If none of the notes in the bottom left of the section is highlighted, you're in Modifying mode. In this mode, you can right click a note to delete it, or you can click on any notes in the chart to bring up a new menu. Each note type will have a different menu that comes up, but all of the will feature a <code>Measure</code> and <code>Resolution</code> section. Using the buttons, or typing a value will change that note to be played at that time.</p>"},{"location":"samba-de-amigo/chart/#norm-noteblue-happ-notehappening","title":"NORM Note/Blue + HAPP Note/Happening","text":"<p>The NORM and HAPP notes feature no additional values.</p>"},{"location":"samba-de-amigo/chart/#mash-notered","title":"MASH Note/Red","text":"<p>The MASH note includes one additional value called length. Changing this value changes how long the note needs to be held.</p>"},{"location":"samba-de-amigo/chart/#slid-noteslide","title":"SLID Note/Slide","text":"<p>The SLID note has additional values for Wait, Speed, and Pattern.</p> <ul> <li>Wait - How long from the note spawning until the note starts moving.</li> <li>Speed - How fast the slide moves.</li> <li>Pattern - How the pattern moves. Select this from the list of images.</li> </ul>"},{"location":"stages/","title":"Script editing","text":"<p>The goal of this section is to provide a central knowledgebase for everything related to the XIII trilogy CLB scripts.</p> <p>Warning</p> <p>Script editing is currently in it's infancy/investigation phase, consider everything here as WIP.</p> <ul> <li> Setup \u2013 Setup the necessary tools for creating stages.</li> <li> Creating \u2013 Information about adding objects to your stage</li> <li> Stage Extensions \u2013 Information about using Stage Extensions features.</li> <li> Building \u2013 Information about playing your stage in game.</li> </ul>"},{"location":"stages/basics/extracting/","title":"Extracting","text":"<p>In this section, you will learn how to generate your codebase from the game files and setup the necessary tools to make brand new scripts.</p>"},{"location":"stages/basics/extracting/#setting-up-intellij-idea","title":"Setting up IntelliJ Idea","text":"<p>We will use IntelliJ Idea to view and write our clb scripts:</p> <ul> <li>Go to IntelliJ's download page and make sure to download the free Community Edition which has more than enough features for our needs.</li> </ul> <p></p> <ul> <li>During the installation process, make sure to tick the Add \"Open Folder as Project\" option, it will make things easier later. Feel free to tick others if you want to, the .java one in particular.</li> </ul> <p></p>"},{"location":"stages/basics/extracting/#generating-your-codebase","title":"Generating your codebase","text":"<p>Note</p> <p>This section assumes that you have already dumped your game files.</p> <p>Most of the clb scripts rely on a particular set of packages (which define general math functions, UI utilities etc). We are now going to dump these to usable .java files:</p> <ul> <li> <p>Download the JavaToCLB archive and unzip it.</p> </li> <li> <p>Go to the common script game folder by following the path given below:</p> </li> </ul> <code>Final Fantasy XIII</code> <code>Final Fantasy XIII-2</code> <code>Lightning Returns</code> <pre><code>FINAL FANTASY XIII\\white_data\\sys\\script\n</code></pre> <pre><code>FINAL FANTASY XIII-2\\alba_data\\sys\\script\n</code></pre> <pre><code>LIGHTNING RETURNS FINAL FANTASY XIII\\weiss_data\\sys\\script\n</code></pre> <ul> <li>Unpack the following .bin containers located in these folders using Nova's \"Unpack WPD File\" utility (found in its Mod Tools tab)</li> </ul> <pre><code>WhiteBaseClassJar.bin\nblt\\btlclb.bin\n</code></pre> <ul> <li> <p>Finally, drag and drop the whole \"script\" folder on the JavatoCLB.exe executable and it will automatically convert all the clb files to clean .java files, organized in a proper folder structure, in a \"script_decomp\" folder. Wait for the conversion to be done, you can move this folder elsewhere and rename it to something more meaningful like \"FFXIIICodebase\" for example.</p> </li> <li> <p>Open this folder as an IntelliJ project by right-clicking it then choosing \"Open folder as project\". Expand all the files by clicking on the \"Expand all\" icon at the top:</p> </li> </ul> <p></p> <ul> <li>Select all your project files by using CTRL-A then go to File -&gt; File Properties -&gt; Remove BOM.</li> </ul> <p>Warning</p> <ul> <li>Make sure to delete the String.java file, it is useless and will lead to errors during the editing process.</li> </ul> <p>That's it, the codebase is now ready to be used for reading and writing clb scripts.</p> <p>You can now proceed to the next page to setup the repacking utilities.</p>"},{"location":"stages/basics/repacking/","title":"Repacking","text":"<p>In this section, you will learn how to write your own clb scripts. </p> <p>Note</p> <p>This section assumes that you have already setup the codebase properly.</p>"},{"location":"stages/basics/repacking/#installing-the-java-5-sdk","title":"Installing the Java 5 SDK","text":"<p>We need to use the same Java version as the XIII Trilogy, go to the Oracle website and download the Java 5 SDK and install it.</p> <p>Tip</p> <p>To avoid creating an account, right click on the download link and remove everything before \"nexturl=\" (including it). For example,  <pre><code>https://www.oracle.com/webapps/redirect/signon?nexturl=https://download.oracle.com/otn/java/jdk/1.5.0_22/jdk-1_5_0_22-windows-i586-p.exe\n</code></pre> becomes  <pre><code>https://download.oracle.com/otn/java/jdk/1.5.0_22/jdk-1_5_0_22-windows-i586-p.exe\n</code></pre></p>"},{"location":"stages/basics/repacking/#setting-up-the-intellij-idea-external-tool","title":"Setting up the IntelliJ IDEA external tool","text":"<p>We are now going to setup an external tool to compile our .java files to .clb in IntelliJ:</p> <ul> <li>Open IntelliJ, then go to File-&gt;Settings-&gt;Tools-&gt;ExternalTools:</li> </ul> <p></p> <ul> <li>Click on the \"+\" button to create a new one and name it however you want. The following window will appear:</li> </ul> <p></p> <p>The most important fields are the following:</p> <p>Note</p> <ul> <li>Program: put your JavatoCLB.exe location here, between quotes (\"\")</li> <li>Arguments: put  <pre><code>\"$FilePathRelativeToSourcepath$\"\n</code></pre> followed by  your javac.exe location, from your Java 5 install folder, between quotes (\"\")</li> <li>Working Directory: put  <pre><code>$Sourcepath$\n</code></pre></li> </ul> <p>That's it, you will now be able to generate your clb file with a single from your .java file by right-clicking the choosing External Tools -&gt; YourToolName.</p>"},{"location":"stages/writing/examples/","title":"Examples","text":"<p>This sections aims to provide simple examples of script editing.</p> <p>Note</p> <p>This section assumes that you have already setup the necessary script editing workflow..</p> <ul> <li> Example1 \u2013 Messing around with the Ark's teleporter.</li> </ul>"},{"location":"stages/writing/faq/","title":"Faq","text":""},{"location":"stages/writing/faq/#im-getting-errors-parts-of-the-code-underlined-in-red-for-a-few-files-when-opening-the-codebase-in-intellij-idea","title":"I'm getting errors (parts of the code underlined in red) for a few files when opening the codebase in IntelliJ idea","text":"<p>This is due to the decompilation not being good enough for a few functions. Unless you're looking to repack the file containing such functions specifically, you can either ignore such errors or simply comment the offending functions' body to get rid of them.</p> <p>As the codebase will get cleaner these errors will hopefully disappear.</p>"},{"location":"stages/writing/tips/","title":"Tips","text":""},{"location":"stages/writing/tips/#intellij-shortcuts","title":"IntelliJ shortcuts","text":"<ul> <li>CTRL-F12: this will enable you to see all the available methods of the class defined in your current file. </li> </ul> <ul> <li>Right-click on a function then \"Find usages\": this will enable you to see in which file(s) the function is called and give you the possibility to jump to it directly. </li> </ul> <ul> <li>Right-click-&gt; Go to -&gt; declaration or usages: this is the other way around, if you see a function used and want to jump to its definition</li> </ul>"},{"location":"stages/writing/examples/example1/","title":"Example1","text":"<p>In this example, we are going to repurpose the Ark's teleporter to execute our own custom function.</p>"},{"location":"stages/writing/examples/example1/#dumping-the-zone-scripts","title":"Dumping the zone scripts","text":"<p>We first need to dump the zone scripts of the Ark, which are located in </p> <pre><code>LIGHTNING RETURNS FINAL FANTASY XIII\\weiss_data\\zone\\z0110\n</code></pre> <p>Drag and drop this folder on the JavaToCLB.exe to do so, you'll end up with 3 decompiled java files. Place them at the root of your codebase, you should end up with a project structure like the following:</p> <p></p>"},{"location":"stages/writing/examples/example1/#writing-our-new-logic","title":"Writing our new logic","text":"<p>By default, the function called when activating the teleporter is \"efTelepoMachine\", found in in the scr250 file. We are going to have it call our own function that we're going to write in scr000.</p> <p>Note</p> <p>You could write this function in any of the scrxxx files.</p> <p>The original function has the following signature:</p> <code>scr250.java</code> <pre><code>public static int efTelepoMachine(String string, String string2)\n</code></pre> <p>So we're going to copy it as is and make it return 1 just like the original one:</p> <code>scr000.java</code> <pre><code>public static int efTelepoMachine(String string, String string2) {\n  return 1;\n}\n</code></pre> <p>We can now write any logic that we want to happen when using the teleporter. In this example, I'm going to display a quick prompt, fade out in white, display another prompt, fade in in white, display a menu.</p> <code>scr000.java</code> <pre><code>public static int efTelepoMachine(String string, String string2) {\n      //Fade out\n      com.sfShowWindowWithKeyWait((String)\"Fade out white.\");\n      Window.startFadeOutWhite(500);\n\n      //Fade in\n      com.sfShowWindowWithKeyWait((String)\"Fade in white.\");\n      Window.startFadeInWhite(500);\n\n      //Menu\n      String title = \"Did you enjoy it?\";\n      String[] menuItems = new String[]{\"Yes\", \"No\"};\n      com.sfCallAskChoiceWindow(title, menuItems, 2);\n      int v = com.sfWaitAskChoiceWindowSkipAvailable(title);\n      switch (v) {\n          case 0: {\n              com.sfShowWindowWithKeyWait((String) \"Cool!\");\n              break;\n          }\n          case 1: {\n              com.sfShowWindowWithKeyWait((String) \"Too bad...\");\n              break;\n          }\n      }\n      return 1;\n  }\n</code></pre> <p>We're done, it's now time to compile our edited file back to clb. To do so, simply right-click on it then click on External Tools -&gt; YourToolName. Wait for a bit and you will get a compiled scr000.clb file.</p> <p>You can inject it back ingame using LayeredFS or by running the game in unpacked mode</p> <p>Note</p> <p>To have this mod taken into account, you will also need to do a small database edit. A dedicated tutorial will be written later, for now simply use the following file as a modification of the original one located at <pre><code>LIGHTNING RETURNS FINAL FANTASY XIII\\weiss_data\\db\\script\\script00110.wdb\n</code></pre></p> <p>That's it, you can now go to the teleporter and check out the result:</p>"},{"location":"user-guide/beginnersguide/","title":"Beginner's Guide","text":"<p>The process of installing mods is fairly simple. If you have any questions about modding, consider joining the Discord.</p> <p>Before starting, you'll need an archiving program such as 7Zip or Winrar to open .7z, .rar, and .zip files. It will vary by system, but you'll typically want the x64 Windows version.</p>"},{"location":"user-guide/beginnersguide/#installing-the-mod-loader","title":"Installing The Mod Loader","text":"<ul> <li>Begin by opening the root folder for P06. If you see a file called \"Sonic the Hedgehog.exe\", this is the correct location</li> <li>Go to the Mod Loader GameBanana Page. Scroll down and press \"Download\".</li> <li>Once downloaded, open the file in your archiving program.</li> <li>You should see four folders and a file called \"version.dll\". You'll need to extract these to your P06 root, next to \"Sonic the Hedgehog.exe\". You can typically do this by selecting the \"MelonLoader\" folder, then selecting \"version.dll\" while holding the Shift key. Once everything is highlighted, click and hold one of the highlighted files with the left mouse button. Drag your cursor to the P06 root folder and release the left mouse button.</li> <li>Run the game. If you see a MelonLoader loading screen when the game starts, the mod loader has been successfully installed.</li> </ul>"},{"location":"user-guide/beginnersguide/#installing-the-mod-loader-on-steam-deck","title":"Installing The Mod Loader On Steam Deck","text":"<p>Using mods on Steam Deck will require some extra steps. Start with the first four steps of Installing The Mod Loader. You'll also need to install Protontricks. </p> <p>Note</p> <p>Thanks to onyxlebron for the following instructions.</p> <ul> <li> <p>Go to desktop mode and open Konsole. Type \"protontricks -s [GameName]\" without the quotes. Replace GameName with w.e name you have Project 06 as in steam (mine is Sonic The Hedgehog). It'll give you the app id so remember it.</p> </li> <li> <p>In Konsole run \"protontricks [appid] winecfg\" without the quotes. Replace appid with Project 06's app id.</p> </li> <li> <p>In the window that pops up look at the bottom and change the Windows version to Windows 10.</p> </li> <li> <p>Go to the libraries tab, click on the \"new override for library\" drop down and find \"version\". Click it and select add. Hit apply and ok.</p> </li> <li> <p>Install your mods like you normally would and launch Project 06 from steam and everything should be good. MelonLoader should pop up and launch the game normally. Works in game mode and desktop mode.</p> </li> </ul>"},{"location":"user-guide/beginnersguide/#installing-mods","title":"Installing Mods","text":"<p>Once the Mod Loader is installed, installing other mods such as stages, characters, and plugins is very simple.</p> <ul> <li>Make sure you've run the game once after installing the Mod Loader.</li> <li>Head to the GameBanana Page.</li> <li>Once you find a mod you want, scroll down and press the button that says \"Project '06 Mod Loader  1-CLICK INSTALL\".</li> <li>You'll have a window pop up titled \"Project '06 Mod Loader\" asking to install the mod. Click \"Yes\".</li> <li>Another window will pop up with a progress bar. Wait for it to finish, and press \"OK\". The mod has been installed.</li> </ul> <p>Note</p> <p>It's recommended to install Stage Extensions. Many custom stages rely on features in this mod.</p>"},{"location":"user-guide/beginnersguide/#assembly-mods","title":"Assembly Mods","text":"<p>Most mods can be installed with the previous method, and it normally won't matter what version of the game you're running. However, there are other types of mods, referred to as assembly mods, that can't be installed with the previous method and must be installed on a specific version of the game. </p> <p>Warning</p> <p>It's recommended you make a new install of the game before using assembly mods. Assembly mods overwrite important game files preventing you from playing the vanilla game on the same install.</p> <p>If you see \"Assembly-CSharp.dll\" when you open the mod archive, navigate to \"(Game Root)/Sonic the Hedgehog_Data/Managed\" and place \"Assembly-CSharp.dll\" there. </p> <p>If you see \"Sonic the Hedgehog_Data\" when you open the mod archive, place all the files in the game root.</p>"}]}